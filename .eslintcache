[{"C:\\Users\\Dan Spyer\\Documents\\Github\\spacex-tracker\\src\\App.tsx":"1","C:\\Users\\Dan Spyer\\Documents\\Github\\spacex-tracker\\src\\Components\\CountdownClock\\CountDownClock.tsx":"2","C:\\Users\\Dan Spyer\\Documents\\Github\\spacex-tracker\\src\\Components\\Home\\NextLaunch.tsx":"3"},{"size":839,"mtime":1614196220923,"results":"4","hashOfConfig":"5"},{"size":1991,"mtime":1614202038059,"results":"6","hashOfConfig":"5"},{"size":3219,"mtime":1614895286941,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"mfg4tx",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Dan Spyer\\Documents\\Github\\spacex-tracker\\src\\App.tsx",["15"],"import React from 'react';\r\nimport { Navbar } from './Components/Navigation/Navbar'\r\nimport { NextLaunchLogic } from './Components/Home/NextLaunchLogic'\r\nimport { QueryClient, QueryClientProvider, useQuery } from 'react-query'\r\n// Import bootstrap before custom CSS so that our css overrides bootstrap\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './App.css';\r\nimport './Components/Home/NextLaunch.css';\r\n\r\n // Create a client\r\nconst queryClient = new QueryClient()\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"Background flexbox\">\r\n        <Navbar/>\r\n\r\n        <QueryClientProvider client={queryClient}>\r\n          <div className=\"Content\">\r\n            <NextLaunchLogic/>\r\n          </div>\r\n        </QueryClientProvider>\r\n          \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Dan Spyer\\Documents\\Github\\spacex-tracker\\src\\Components\\CountdownClock\\CountDownClock.tsx",[],"C:\\Users\\Dan Spyer\\Documents\\Github\\spacex-tracker\\src\\Components\\Home\\NextLaunch.tsx",["16","17"],{"ruleId":"18","severity":1,"message":"19","line":4,"column":44,"nodeType":"20","messageId":"21","endLine":4,"endColumn":52},{"ruleId":"22","severity":1,"message":"23","line":48,"column":27,"nodeType":"24","messageId":"25","endLine":48,"endColumn":29},{"ruleId":"26","severity":1,"message":"27","line":72,"column":37,"nodeType":"28","endLine":72,"endColumn":40},"@typescript-eslint/no-unused-vars","'useQuery' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]